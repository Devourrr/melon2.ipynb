DESC EMP;
DESC DUAL;
SELECT '010-1234-5678' AS REPLACE_BEFORE
, REPLACE('010-1234-5678','-',' ') AS REPLACE_1
, REPLACE('010-1234-5678','-') AS REPLACE_2 FROM DUAL; -- REPLACE함수로 문자열 안에 있는 특정문자 바꾸기

SELECT 'Oracle'
, LPAD('Oracle', 10, '#') AS LPAD_1
, RPAD('Oracle', 10, '*') AS RPAD_1 -- LPAD RPAD함수로 빈 공간을 특정 문자'#','*'로 채우기
, LPAD('Oracle', 10) AS LPAD_2
, RPAD('Oracle', 10) AS RPAD_2 FROM DUAL; -- 특정문자 미지정시 공백으로 채워짐

SELECT
RPAD('971225-',14,'*') AS RPAD_SECURITY
,RPAD('010-1234-',13,'*') AS RPAD_PHONE FROM DUAL; -- 개인정보 뒷자리 *로 출력

SELECT CONCAT(EMPNO, ENAME) -- 두 문자열 데이터를 합치는 CONCAT 함수
, CONCAT(EMPNO, CONCAT(': ', ENAME)) FROM EMP WHERE ENAME = 'SCOTT'; -- 두 열 사이에 :넣고 연결하기
-- CONCAT과 유사한 ||연산자

SELECT '['|| TRIM(' _ _Oracle_ _ ')|| ']'AS TRIM -- 특정 문자를 지우는TRIM( LEADING, TRAILING, BOTH)함수. 삭제할 문자가 없을 때 공백제거
, '['|| TRIM(LEADING FROM' _ _Oracle_ _ ')|| ']'AS TRIM_LEADING     --왼쪽 공백 제거
, '['|| TRIM(TRAILING FROM' _ _Oracle_ _ ')|| ']'AS TRIM_TRAILING  -- 오른쪽 공백 제거
, '['|| TRIM(BOTH FROM' _ _Oracle_ _ ')|| ']'AS TRIM_BOTH FROM DUAL; --양쪽 공백 제거

SELECT '['|| TRIM('_' FROM ' _ _Oracle_ _ ')|| ']'AS TRIM -- 특정 문자를 지우는 TRIM, LTRIM, RTRIM함수. 삭제할 문자가 있을 때 '_'제거
, '['|| TRIM(LEADING '_' FROM ' _ _Oracle_ _ ')|| ']'AS TRIM_LEADING     --왼쪽 '_' 제거
, '['|| TRIM(TRAILING '_' FROM ' _ _Oracle_ _ ')|| ']'AS TRIM_TRAILING  -- 오른쪽 '_' 제거
, '['|| TRIM(BOTH '_' FROM' _ _Oracle_ _ ')|| ']'AS TRIM_BOTH FROM DUAL; -- 양쪽 '_' 제거

SELECT '['|| TRIM(' _Oracle_ ') || ']' AS TRIM
,'[' || LTRIM(' _Oracle_ ') || ']' AS LTRIM
,'[' || LTRIM('<_Oracle_>','_<') || ']' AS LTRIM_2
,'[' || RTRIM(' _Oracle_ ') || ']' AS RTRIM
,'[' || RTRIM('<_Oracle_>') || ']' AS RTRIM_2 FROM DUAL; -- TRIM, LTRIM, RTRIM 사용하여 문자열 출력하기

SELECT ROUND(1234.5678) AS ROUND -- 반올림위치 미지정 = 0으로 지정
, ROUND(1234.5678,0) AS ROUND_0 
, ROUND(1234.5678,1) AS ROUND_1 -- 반올림위치가 소수점 첫번째
, ROUND(1234.5678,2) AS ROUND_2
, ROUND(1234.5678,-1) AS ROUND_MINUS1 -- 반올림위치가 자연수 첫번째
, ROUND(1234.5678,-2) AS ROUND_MINUS2 FROM DUAL; -- ROUND함수 사용하여 반올림된 숫자 출력하기

SELECT TRUNC(1234.5678) AS TRUNC -- 소수점위치 미지정 = 0번째 버림
, TRUNC(1234.5678, 0) AS TRUNC_0 
, TRUNC(1234.5678, 1) AS TRUNC_1 -- 소수점 첫번째 버림
, TRUNC(1234.5678, 2) AS TRUNC_2
, TRUNC(1234.5678, -1) AS TRUNC_MINUS1 -- 자연수 첫번째 버림
, TRUNC(1234.5678, -2) AS TRUNC_MINUS2 FROM DUAL; --TRUNC함수 사용하여 숫자 출력

SELECT CEIL(3.14) -- 3.14보다 큰 정수 중 가장 가까운 정수
, FLOOR(3.14) -- 3.14보다 작은 정수 중 가장 가까운 정수
,CEIL(-3.14)
,FLOOR(-3.14) FROM DUAL; -- CEIL 함수로 가까운 숫자 출력

SELECT MOD(15,6)
, MOD(10,2)
, MOD(11,2) FROM DUAL; -- 나머지 값을 출력해주는 MOD 함수

SELECT SYSDATE AS NOW -- 날짜를 출력해주는 SYSDATE 함수
, SYSDATE -1 AS YESTERDAY -- SYSDATE -1 =어제
, SYSDATE+1 AS TOMORROW FROM DUAL; -- SYSDATE +1 = 내일

SELECT SYSDATE
,ADD_MONTHS(SYSDATE, 3) FROM DUAL; -- 몇개월 후 날짜를 구하는 ADD_MONTHS 함수

SELECT EMPNO, ENAME, HIREDATE
, ADD_MONTHS(HIREDATE, 120) AS WORK10YEAR FROM EMP; -- ADD_MONTHS함수로 10주년 직원 데이터 조회

SELECT EMPNO, ENAME, HIREDATE, SYSDATE FROM EMP
WHERE ADD_MONTHS(HIREDATE,480) > SYSDATE; --WHERE 절에 ADD_MONTHS 함수 사용하여 입사 32년 미만 사원 데이터 조회

SELECT SYSDATE
, ADD_MONTHS(SYSDATE,6) FROM DUAL;

SELECT EMPNO, ENAME, HIREDATE, SYSDATE -- MONTHS_BETWEEN(A,B)함수로 두 날짜간 개월 수 차이 출력하기
, MONTHS_BETWEEN(HIREDATE, SYSDATE) AS MONTHS1 -- 비교 날짜 입력 위치에 따라 음수/양수 소수점 단위까지 결과 출력
, MONTHS_BETWEEN(SYSDATE, HIREDATE) AS MONTHS2
, TRUNC(MONTHS_BETWEEN(SYSDATE, HIREDATE)) AS MONTHS3 FROM EMP;  --TRUNC함수 조합으로 정수 출력

SELECT SYSDATE
, NEXT_DAY(SYSDATE, '월요일') -- NEXT_DAY(날짜,요일) 함수로 날짜 데이터에서 돌아오는 요일 날짜 반환
, LAST_DAY(SYSDATE) FROM DUAL; -- LAST_DAY(날짜) 함수로 해당 날짜 속한 달의 마지막 날짜 반환

SELECT SYSDATE
, ROUND(SYSDATE,'CC') AS FORMAT_CC
, ROUND(SYSDATE,'YYYY') AS FORMAT_YYYY
, ROUND(SYSDATE,'Q') AS FORMAT_Q
, ROUND(SYSDATE,'DDD') AS FORMAT_DDD
, ROUND(SYSDATE,'HH') AS FORMAT_HH FROM DUAL; -- ROUND 함수 사용 날짜 데이터 출력

SELECT SYSDATE
, TRUNC(SYSDATE,'CC') AS FORMAT_CC
, TRUNC(SYSDATE,'YYYY') AS FORMAT_YYYY
, TRUNC(SYSDATE,'Q') AS FORMAT_Q
, TRUNC(SYSDATE,'DDD') AS FORMAT_DDD
, TRUNC(SYSDATE,'HH') AS FORMAT_HH FROM DUAL; -- TRUNC 함수 사용 날짜 데이터 출력

SELECT EMPNO, ENAME, EMPNO + '500' FROM EMP -- 자동 형 변환, 암시적 형 변환( 숫자로 인식 가능한 문자 데이터가 자동으로 숫자로 바뀐 후 연산 수행)
WHERE ENAME = 'SCOTT'; -- 숫자열 + 문자열(숫자) 더하여 출력

SELECT 'ABCD' + EMPNO, EMPNO FROM EMP WHERE ENAME = 'SCOTT'; -- 숫자처럼 생기지 않은 문자 데이터는 자동 형 변환 동작 기대가 어려움
-- 사용자 지정 형변환, 명시적 형 변환 CHAR ↔ NUMBER ↔ DATE 변환 가능
SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS') AS 현재날짜시간 FROM DUAL;
SELECT SYSDATE
, TO_CHAR(SYSDATE, 'MM') AS MM
, TO_CHAR(SYSDATE, 'MON') AS MON
, TO_CHAR(SYSDATE, 'MONTH') AS MONTH -- 월
, TO_CHAR(SYSDATE, 'DD') AS DD -- 날짜
, TO_CHAR(SYSDATE, 'DY') AS DY -- 요일
, TO_CHAR(SYSDATE, 'DAY') AS DAY FROM DUAL; -- SYSDATE 포맷을 문자로 변환

SELECT SYSDATE
, TO_CHAR(SYSDATE,'MM') AS MM
, TO_CHAR(SYSDATE,'MON', 'NLS_DATE_LANGUAGE = KOREAN') AS MON_KOR -- TO_CHAR(SYSDATE,'FORMAT' 'NLS_DATE_LANGUAGE = ')
, TO_CHAR(SYSDATE,'MON', 'NLS_DATE_LANGUAGE = JAPANESE') AS MON_JPN
, TO_CHAR(SYSDATE,'MON', 'NLS_DATE_LANGUAGE = ENGLISH') AS MON_ENG
, TO_CHAR(SYSDATE,'MONTH', 'NLS_DATE_LANGUAGE = KOREAN') AS MON_KOR
, TO_CHAR(SYSDATE,'MONTH', 'NLS_DATE_LANGUAGE = JAPANESE') AS MON_JPN
, TO_CHAR(SYSDATE,'MONTH', 'NLS_DATE_LANGUAGE = ENGLISH') AS MON_ENG FROM DUAL; --여러 언어로 날짜(월) 출력하기

SELECT SYSDATE
, TO_CHAR(SYSDATE, 'MM') AS MM
, TO_CHAR(SYSDATE, 'DD') AS DD
, TO_CHAR(SYSDATE, 'DY', 'NLS_DATE_LANGUAGE = KOREAN') AS DY_KOR
, TO_CHAR(SYSDATE, 'DY', 'NLS_DATE_LANGUAGE = JAPANESE') AS DY_JPN
, TO_CHAR(SYSDATE, 'DY', 'NLS_DATE_LANGUAGE = ENGLISH') AS DY_ENG
, TO_CHAR(SYSDATE, 'DAY', 'NLS_DATE_LANGUAGE = KOREAN') AS DY_KOR
, TO_CHAR(SYSDATE, 'DAY', 'NLS_DATE_LANGUAGE = JAPANESE') AS DY_JPN
, TO_CHAR(SYSDATE, 'DAY', 'NLS_DATE_LANGUAGE = ENGLISH') AS DY_ENG FROM DUAL; -- 여러 언어로 날짜(요일) 출력하기

SELECT SYSDATE
, TO_CHAR(SYSDATE , 'HH24:MI:SS') AS HH24MISS
, TO_CHAR(SYSDATE , 'HH24:MI:SS AM') AS HH24MISS_AM
, TO_CHAR(SYSDATE , 'HH24:MI:SS P.M.') AS HH24MISS_PM FROM DUAL; -- 시간 형식 지정하여 출력하기

SELECT SAL
, TO_CHAR(SAL, '$999,999') AS SAL_$
, TO_CHAR(SAL, 'L999,999') AS SAL_L
, TO_CHAR(SAL, '999,999.00') AS SAL_1
, TO_CHAR(SAL, '000,999,999.00') AS SAL_2
, TO_CHAR(SAL, '000999999.99') AS SAL_3
, TO_CHAR(SAL, '999,999,00') AS SAL_4 FROM EMP;

SELECT 1300 - '1500' -- 문자데이터 + 숫자데이터 연산 출력
,'1300' +1500 FROM DUAL; -- 문자데이터끼리는 연산불가

SELECT TO_NUMBER('1,300','999,999') - TO_NUMBER('1,500', '999,999') FROM DUAL; -- TO_NUMBER함수로 문자데이터 연산

SELECT TO_DATE('2018-07-14', 'YYYY-MM-DD') AS TODATE1 --TO_DATE('문자열데이터', '인식될 날짜 형태)
, TO_DATE('20180714', 'YYYY-MM-DD') AS TODATE2 FROM DUAL;-- 문자 데이터를 날짜 데이터로 변환하기

SELECT * FROM EMP
WHERE HIREDATE > TO_DATE('1981/06/01','YYYY/MM/DD'); --1981/06/01 이후에 입사한 사원정보 출력하기

SELECT TO_DATE('49/12/10', 'YY/MM/DD') AS YY_YEAR_49
, TO_DATE('49/12/10', 'RR/MM/DD') AS YY_YEAR_49
, TO_DATE('50/12/10', 'YY/MM/DD') AS YY_YEAR_50
, TO_DATE('50/12/10', 'RR/MM/DD') AS YY_YEAR_50
, TO_DATE('51/12/10', 'YY/MM/DD') AS YY_YEAR_51
, TO_DATE('51/12/10', 'RR/MM/DD') AS YY_YEAR_51 FROM DUAL;

SELECT * FROM EMP WHERE HIREDATE > TO_DATE('1980/10/15', 'YYYY/MM/DD');

SELECT EMPNO, ENAME, SAL, COMM, SAL+COMM
, NVL(COMM,0)
, SAL+NVL(COMM,0) FROM EMP; --NULL 여부에 따라 그대로 반환하거나 지정한 값을 반환하는 NVL함수

SELECT EMPNO, ENAME, COMM
, NVL2(COMM, '0', 'X')
, NVL2(COMM, SAL*12+COMM, SAL*12) AS ANNSAL FROM EMP; -- NULL이 아닐 경우, NULL일 경우 반환데이터를 지정하는 NVL2함수

SELECT EMPNO, ENAME, JOB, SAL
,DECODE(JOB -- 검사 대상이 될 열 또는 데이터, 연산이나 함수의 결과
,'MANAGER', SAL*1.1 -- JOB = 'MANAGER' 경우 10%인상한 급여
,'SALESMAN', SAL*1.05 -- JOB = 'SALESMAN' 경우 5% 인상한 급여
,'ANALYST', SAL -- JOB = 'ANALYST' 인 경우 그대로  
,SAL*1.03) AS UPSAL FROM EMP; -- 나머지는 3%인상한 급여 출력하는 DECODE함수, 맨 마지막 데이터 반환 값 미지정시 NULL반환

SELECT EMPNO, ENAME, JOB, SAL
,CASE JOB -- 검사 대상이 될 열 또는 데이터, 연산이나 함수의 결과
WHEN 'MANEGER' THEN SAL*1.1 -- JOB = 'MANAGER' 경우 10%인상한 급여 
WHEN 'SALESMAN' THEN SAL*1.05 -- JOB = 'SALESMAN' 경우 5% 인상한 급여
WHEN 'ANALYST' THEN SAL -- JOB = 'ANALYST' 인 경우 그대로 
ELSE SAL * 1.03 -- 나머지는 3%인상한 급여 출력하는 CASE문, 각 조건에 사용하는 데이터가 서로 상관없어도 되며 기준 데이터 값이 같은 데이터 외에 다양한 조건 사용가능
END AS UPSAL FROM EMP; -- DECODE함수보다 높은 범용성

SELECT EMPNO, ENAME, COMM
,CASE
WHEN COMM IS NULL THEN 'NULL'
WHEN COMM = 0 THEN '수당없음'
WHEN COMM > 0 THEN ' 수당 :' || COMM
END AS COMM_TEXT FROM EMP; -- 열 값에 따라서 출력 값이 달라지는 CASE문



